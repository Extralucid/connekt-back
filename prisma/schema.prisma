// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Profession {
  idprofession           String   @id @unique @default(uuid())
  codeprofession         String   @unique @db.VarChar(255)
  libelleprofession      String   @unique @db.VarChar(255)
  descriptionsprofession String?
  published              Boolean? @default(true) @db.Boolean
  isDeleted              Boolean? @default(false) @db.Boolean
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model Prestataire {
  idprestataire          String   @id @unique @default(uuid())
  codeprestataire        String   @unique @db.VarChar(255)
  nomprestataire         String   @unique @db.VarChar(255)
  responsableprestataire String?  @db.VarChar(255)
  emailprestataire       String?  @db.VarChar(255)
  siteprestataire        String?  @db.VarChar(255)
  phoneprestataire       String?  @db.VarChar(255)
  faxprestataire         String?  @db.VarChar(255)
  longitudeprestataire   String?  @db.VarChar(255)
  latitudeprestataire    String?  @db.VarChar(255)
  descriptionprestataire String?
  adresseprestataire     String?
  published              Boolean? @default(true) @db.Boolean
  isDeleted              Boolean? @default(false) @db.Boolean
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  User User[]
}

model MethodePaiement {
  idmethode                 String   @id @unique @default(uuid())
  nomMethode                String   @unique @db.VarChar(255)
  codeMethode               String   @unique @db.VarChar(255)
  descriptionMethode        String?
  name                      String?  @db.VarChar(255)
  merchantID                String?  @unique @db.VarChar(255)
  API_KEY                   String?
  currencyCode              String?  @db.VarChar(255)
  automaticRecurringPayment String?  @db.VarChar(255)
  placeholder1              String?  @db.VarChar(255)
  placeholder2              String?  @db.VarChar(255)
  placeholder3              String?  @db.VarChar(255)
  published                 Boolean? @default(true) @db.Boolean
  isDeleted                 Boolean? @default(false) @db.Boolean
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model Parametre {
  idparametre                String   @id @unique @default(uuid())
  mailUserCreation           Boolean? @default(false) @db.Boolean
  mailUserActivation         Boolean? @default(false) @db.Boolean
  mailSouscriptionActivation Boolean? @default(false) @db.Boolean
  mailSouscriptionSuspension Boolean  @default(false) @db.Boolean
  mailDemandeCreation        Boolean  @default(false) @db.Boolean
  nomcompagnie               String?  @db.VarChar(255)
  logocompagnie              String?  @db.VarChar(255)
  phonecompagnie             String?  @db.VarChar(255)
  emailcompagnie             String?  @db.VarChar(255)
  sitecompagnie              String?  @db.VarChar(255)
  adressecompagnie           String?  @db.VarChar(255)
  pgw_url                    String?  @db.VarChar(255)
  pgw_secret                 String?  @db.VarChar(255)
  isDeleted                  Boolean  @default(false) @db.Boolean
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model PasswordReset {
  idreset   String   @id @unique @default(uuid())
  email     String   @db.VarChar(255)
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model User {
  id                  String         @id @unique @default(uuid())
  email               String         @unique @db.VarChar(255)
  phone               String         @unique @db.VarChar(255)
  pwd_hash            String
  codeuser            String         @db.VarChar(250)
  unom                String?        @db.VarChar(250)
  uprenom             String?        @db.VarChar(250)
  password_hash       String?        @db.VarChar(250)
  display_name        String?        @db.VarChar(250)
  registration_date   DateTime?      @db.Date
  last_login          DateTime?      @db.Date
  is_banned           Boolean        @default(false) @db.Boolean
  profile_picture_url String?        @db.VarChar(250)
  bio                 String?        @db.Text
  email_verified_at   DateTime?      @db.Date
  avatar              String?        @db.VarChar(250)
  usession            String?        @db.VarChar(250)
  prestataireId       String?
  Prestataire         Prestataire?   @relation(fields: [prestataireId], references: [idprestataire], onDelete: NoAction)
  refreshTokens       RefreshToken[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isDeleted           Boolean?       @default(false) @db.Boolean

  Document Document[]

  posts         Post[]
  comments      Comment[]
  topics        Topic[]
  replies       Reply[]
  votes         Vote[]
  notifications Notification[]

  @@map("users")
}

model Tdocument {
  idtdoc          String   @id @unique @default(uuid())
  codetdoc        String   @unique @db.VarChar(255)
  nomtdoc         String   @db.VarChar(255)
  descriptiontdoc String?
  published       Boolean? @default(true) @db.Boolean
  isDeleted       Boolean? @default(false) @db.Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Document Document[]
}

model Document {
  iddocument          String    @id @unique @default(uuid())
  nomDocument         String?   @db.VarChar(255)
  codeDocument        String    @unique @db.VarChar(255)
  descriptionDocument String?
  published           Boolean?  @default(true) @db.Boolean
  imported            Boolean?  @default(false) @db.Boolean
  isDeleted           Boolean?  @default(false) @db.Boolean
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  tdocId              String
  Tdocument           Tdocument @relation(fields: [tdocId], references: [idtdoc], onDelete: Cascade, onUpdate: NoAction)
  userId              String?
  User                User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false) @db.Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false) @db.Boolean
}

/**
 * blog management models
 */

model Post {
  post_id            String         @id @unique @default(uuid())
  authorId           String
  author             User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title              String         @db.VarChar(250)
  slug               String         @unique @db.VarChar(250) //(Unique, SEO-friendly URL)
  content            String         @db.Text
  excerpt            String?        @db.VarChar(250) //(Short summary)
  status             PostStatus     @default(DRAFT) //(Enum: "draft", "published", "archived")
  published_date     DateTime?      @db.Date
  updated_date       DateTime?      @updatedAt @db.Date
  featured_image_url String?        @db.VarChar(250) //
  view_count         Int?           @default(0)
  Comment            Comment[]
  categories         PostCategory[]
  tags               PostTag[]

  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  category_id  String         @id @unique @default(uuid()) //(PK, Auto-increment)
  name         String         @db.VarChar(250)
  slug         String         @unique @db.VarChar(250)
  description  String?        @db.Text
  PostCategory PostCategory[]

  @@map("categories")
}

model Tag {
  tag_id  String    @id @unique @default(uuid()) //(PK, Auto-increment)
  name    String    @db.VarChar(250)
  slug    String    @unique @db.VarChar(250)
  PostTag PostTag[]

  @@map("tags")
}

// Junction tables (Many-to-Many)
model PostCategory {
  post       Post     @relation(fields: [postId], references: [post_id])
  postId     String
  category   Category @relation(fields: [categoryId], references: [category_id])
  categoryId String

  @@id([postId, categoryId])
  @@map("post_categories")
}

model PostTag {
  post   Post   @relation(fields: [postId], references: [post_id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [tag_id])
  tagId  String

  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  comment_id   String   @id @unique @default(uuid()) //(PK, Auto-increment)
  post         Post     @relation(fields: [postId], references: [post_id])
  postId       String
  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content      String   @db.Text
  created_date DateTime @default(now())
  isApproved   Boolean  @default(true)

  parentComment   Comment?  @relation("CommentHierarchy", fields: [parentCommentId], references: [comment_id])
  parentCommentId String?
  childComments   Comment[] @relation("CommentHierarchy")

  @@map("comments")
}

/**
 * Forum management
 */

model Forum {
  forum_id      String  @id @unique @default(uuid()) //
  name          String  @db.VarChar(250)
  slug          String  @unique @db.VarChar(250)
  description   String  @db.Text
  parentForum   Forum?  @relation("ForumHierarchy", fields: [parentForumId], references: [forum_id])
  parentForumId String?
  displayOrder  Int     @default(0)
  childForums   Forum[] @relation("ForumHierarchy")
  topics        Topic[]

  @@map("forums")
}

model Topic {
  topic_id     String      @id @unique @default(uuid()) // (PK, Auto-increment)
  forum        Forum       @relation(fields: [forumId], references: [forum_id])
  forumId      String
  authorId     String
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title        String      @db.VarChar(250)
  slug         String      @unique @db.VarChar(250)
  content      String      @db.Text
  status       TopicStatus @default(OPEN) //(Enum: "open", "closed", "pinned", "archived")
  created_date DateTime    @default(now())
  updated_date DateTime    @updatedAt
  view_count   Int?        @default(0)
  replies      Reply[]

  @@map("topics")
}

enum TopicStatus {
  OPEN
  CLOSED
  PINNED
  ARCHIVED
}

model Reply {
  reply_id         String   @id @unique @default(uuid()) // (PK, Auto-increment)
  topic            Topic    @relation(fields: [topicId], references: [topic_id])
  topicId          String
  authorId         String
  author           User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content          String   @db.Text
  created_date     DateTime @default(now())
  updated_date     DateTime @updatedAt
  isAcceptedAnswer Boolean  @default(false) @db.Boolean
  votes            Vote[]

  @@map("replies")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Vote {
  vote_id String   @id @unique @default(uuid())
  reply   Reply    @relation(fields: [replyId], references: [reply_id])
  replyId String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  type    VoteType //(Enum: "upvote", "downvote")

  @@unique([replyId, userId]) // Prevent duplicate votes
  @@map("votes")
}

//Notifications

model Notification {
  notification_id String     @id @unique @default(uuid())
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  message         String     @db.Text
  isRead          Boolean    @default(false) @db.Boolean
  created_date    DateTime   @default(now())
  sourceType      SourceType
  sourceId        Int

  @@map("notifications")
}

enum SourceType {
  POST
  TOPIC
  REPLY
  COMMENT
}
